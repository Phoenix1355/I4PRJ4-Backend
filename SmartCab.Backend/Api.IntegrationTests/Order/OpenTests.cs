using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Api.BusinessLogicLayer.Responses;
using Api.DataAccessLayer.Models;
using Api.DataAccessLayer.Statuses;
using Microsoft.AspNetCore.Identity;
using NUnit.Framework;
using NUnit.Framework.Internal;

namespace Api.IntegrationTests.Order
{
    class OpenTests : IntegrationSetup
    {

        private async Task<TaxiCompany> CreateTaxiCompanyAccount()
        {
            //Setup database
            var request = getRegisterRequest();
            var taxi = new TaxiCompany();
            await PostAsync("/api/customer/register", request);
            using (var context = _factory.CreateContext())
            {
                //Get data
                var customer = context.Customers.First();
                var roleId = context.UserRoles.Where(x => x.UserId == customer.Id).First().RoleId;

                //Set data
                taxi.PasswordHash = customer.PasswordHash;
                taxi.Email = customer.Email;

                //Add taxi
                context.TaxiCompanies.Add(taxi);
                context.SaveChanges();

                //Add role
                var userRole = new IdentityUserRole<string>()
                {
                    RoleId = roleId,
                    UserId = taxi.Id
                };
                //Save role
                context.UserRoles.Add(userRole);
                context.SaveChanges();
            }

            return taxi;
        }

        private async Task LoginOnTaxiCompanyAccount()
        {
            var loginRequest = getLoginRequest();

            var response = await PostAsync("/api/taxicompany/login", loginRequest);

            //Map login returned to object
            var loginResponseObject = GetObject<LoginResponseTaxiCompany>(response);

            //Get Token
            var token = loginResponseObject.Token;

            //Default header authentication setup.
            _client.DefaultRequestHeaders.Add("authorization", "Bearer " + token);

        }

        [Test]
        public async Task Open_NoOrderInDatabase_NoOrdersInDatabaseReturnsEmptyList()
        {

            await CreateTaxiCompanyAccount();
            await LoginOnTaxiCompanyAccount();

            var response = await _client.GetAsync("/api/order/open");
            var responseObject = GetObject<OpenOrdersResponse>(response);

            Assert.That(responseObject.Orders, Is.Empty);
        }

        [Test]
        public async Task Open_NoOrderInDatabase_Ok()
        {

            await CreateTaxiCompanyAccount();
            await LoginOnTaxiCompanyAccount();

            var responseOpenRides = await _client.GetAsync("/api/order/open");

            Assert.That(responseOpenRides.StatusCode, Is.EqualTo(HttpStatusCode.OK));
        }

        [Test]
        public async Task Open_1OrderInDatabaseWithStatusWaitingForAccept_ReturnsOk()
        {
            using (var context = _factory.CreateContext())
            {
                var order = new DataAccessLayer.Models.Order()
                {
                    Status = OrderStatus.WaitingForAccept
                };
                context.Orders.Add(order);
                context.SaveChanges();
            }
            await CreateTaxiCompanyAccount();
            await LoginOnTaxiCompanyAccount();

            var responseOpenRides = await _client.GetAsync("/api/order/open");

            Assert.That(responseOpenRides.StatusCode, Is.EqualTo(HttpStatusCode.OK));
        }

        [Test]
        public async Task Open_1OrderInDatabaseWithStatusAccepted_ReturnsEmptyList()
        {
            using (var context = _factory.CreateContext())
            {
                var order = new DataAccessLayer.Models.Order()
                {
                    Status = OrderStatus.Accepted
                };
                context.Orders.Add(order);
                context.SaveChanges();
            }
            await CreateTaxiCompanyAccount();
            await LoginOnTaxiCompanyAccount();

            var responseOpenRides = await _client.GetAsync("/api/order/open");

            var responseObject = GetObject<OpenOrdersResponse>(responseOpenRides);

            Assert.That(responseObject.Orders, Is.Empty);
        }

        [Test]
        public async Task Open_OrdersInDatabaseWithOneOfEachStatus_Returns1Element()
        {
            using (var context = _factory.CreateContext())
            {
                var order = new DataAccessLayer.Models.Order()
                {
                    Status = OrderStatus.Accepted
                };
                var order2 = new DataAccessLayer.Models.Order()
                {
                    Status = OrderStatus.WaitingForAccept
                };
                var order3 = new DataAccessLayer.Models.Order()
                {
                    Status = OrderStatus.Expired
                };
                context.Orders.Add(order);
                context.Orders.Add(order2);
                context.Orders.Add(order3);
                context.SaveChanges();
            }
            await CreateTaxiCompanyAccount();
            await LoginOnTaxiCompanyAccount();

            var responseOpenRides = await _client.GetAsync("/api/order/open");

            var responseObject = GetObject<OpenOrdersResponse>(responseOpenRides);

            Assert.That(responseObject.Orders.Count, Is.EqualTo(1));
        }

        //Some test using create ride instead of seed method. 
    }


}
