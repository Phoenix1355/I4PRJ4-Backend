using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Api.BusinessLogicLayer.Responses;
using Api.DataAccessLayer.Statuses;
using NUnit.Framework;
using NUnit.Framework.Internal;
using Swashbuckle.AspNetCore.Swagger;

namespace Api.IntegrationTests.Order
{
    class OpenTests : IntegrationSetup
    {

        [Test]
        public async Task Open_NoOrderInDatabase_ReturnsEmptyList()
        {
            //Taxi company login here(And create)

            //Make request
            var response = await _client.GetAsync("api/order/open");
            var responseObject = GetObject<OpenOrdersResponse>(response);
            //Assert
            Assert.That(responseObject.Orders,Is.Empty);
        }

        [Test]
        public async Task Open_1OrderInDatabaseWithStatusWaitingForAccept_Returns1Order()
        {
            //Setup database
            SeedDatabaseWithRide();

            //Taxi company login here(And create)

            //Make request
            var response = await _client.GetAsync("api/order/open");
            var responseObject = GetObject<OpenOrdersResponse>(response);
            //Assert
            Assert.That(responseObject.Orders.Count, Is.EqualTo(1));
        }

        [Test]
        public async Task Open_1OrderInDatabaseWithStatusAccepted_ReturnsEmptyList()
        {
            //Setup database
            SeedDatabaseWithRide(OrderStatus.Accepted);

            //Taxi company login here(And create)


            //Make request
            var response = await _client.GetAsync("api/order/open");
            var responseObject = GetObject<OpenOrdersResponse>(response);
            //Assert
            Assert.That(responseObject.Orders, Is.Empty);
        }

        [Test]
        public async Task Open_OrdersInDatabaseWithOneOfEachStatus_Returns1Element()
        {
            //Setup database
            SeedDatabaseWithRide(OrderStatus.WaitingForAccept);
            SeedDatabaseWithRide(OrderStatus.Accepted);
            SeedDatabaseWithRide(OrderStatus.Expired);

            //Taxi company login here(And create)

            //Make request
            var response = await _client.GetAsync("api/order/open");
            var responseObject = GetObject<OpenOrdersResponse>(response);
            //Assert
            Assert.That(responseObject.Orders.Count, Is.EqualTo(1));
        }


        private void SeedDatabaseWithRide(OrderStatus status = OrderStatus.WaitingForAccept)
        {
            using (var context = _factory.CreateContext())
            {
                var order = new DataAccessLayer.Models.Order()
                {
                    Status = status,
                    Price = 100
                };
                context.Orders.Add(order);
                context.SaveChanges();
            }
        }
    }
}
